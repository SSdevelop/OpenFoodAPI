version: '3'
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: 'rabbitmq'
    ports:
      # AMQP protocol port
      - 5672:5672
      # HTTP management UI
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  menu_consumer:
    container_name: menu_consumer
    build:
      context: ./services/rabbitmq/menu
      dockerfile: Dockerfile
    environment:
      - MONGO_USERNAME=menu
      - MONGO_PASSWORD=pass
      - MONGO_SERVER_HOST=menu_db
      - MONGO_SERVER_PORT=27018
    command: 'python -u consumer_menu.py'
    depends_on:
      - menu
      - rabbitmq
    restart: always

  auth_consumer:
    container_name: auth_consumer
    build:
      context: ./services/rabbitmq/auth
      dockerfile: Dockerfile
    environment:
      - MYSQL_PASSWORD=authroot
      - SECRET_KEY=authenticate-the-user
    command: 'python -u consumer_auth.py'
    depends_on:
      - authentication
      - rabbitmq
    restart: always

  store_consumer:
    container_name: store_consumer
    build:
      context: ./services/rabbitmq/store
      dockerfile: Dockerfile
    environment:
      - MONGO_USERNAME=store
      - MONGO_PASSWORD=pass
      - MONGO_SERVER_HOST=store_db
      - MONGO_SERVER_PORT=27017
      - SECRET_KEY=authenticate-the-user
    command: 'python -u consumer_store.py'
    depends_on:
      - store
      - rabbitmq
    restart: always

  store:
    container_name: store
    depends_on:
      - store_db
      - fluentbit
      - elasticsearch
      - rabbitmq
    build:
      context: ./services/store
      dockerfile: Dockerfile
    environment:
      - MONGO_USERNAME=store
      - MONGO_PASSWORD=pass
      - MONGO_SERVER_HOST=store_db
      - MONGO_SERVER_PORT=27017
      - SECRET_KEY=authenticate-the-user
    ports:
      - '9000:9000'
    logging:
      driver: fluentd
      options:
        tag: store
        fluentd-address: localhost:24224
    restart: always

  store_db:
    container_name: store_db
    image: mongo
    hostname: store-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=store
      - MONGO_INITDB_ROOT_PASSWORD=pass
      - MONGO_INITDB_DATABASE=admin
    volumes:
      - ./services/store/init-db.js:/docker-entrypoint-initdb.d/mongo-init.js
    ports:
      - '27017:27017'

  menu:
    container_name: menu
    build:
      context: ./services/menu
      dockerfile: Dockerfile
    environment:
      - MONGO_USERNAME=menu
      - MONGO_PASSWORD=pass
      - MONGO_SERVER_HOST=menu_db
      - MONGO_SERVER_PORT=27018
    ports:
      - '9001:9001'
    depends_on:
      - menu_db
      - fluentbit
      - elasticsearch
    logging:
      driver: fluentd
      options:
        tag: menu
        fluentd-address: localhost:24224
  menu_db:
    container_name: menu_db
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=menu
      - MONGO_INITDB_ROOT_PASSWORD=pass
      - MONGO_INITDB_DATABASE=admin
    volumes:
      - ./services/menu/init-db.js:/docker-entrypoint-initdb.d/mongo-init.js
    command: mongod --port 27018
    ports:
      - '27018:27018'
    restart: on-failure

  authentication:
    container_name: authentication
    build:
      context: ./services/authentication
      dockerfile: Dockerfile
    environment:
      - MYSQL_PASSWORD=authroot
      - SECRET_KEY=authenticate-the-user
    depends_on:
      - authentication_db
      - fluentbit
      - elasticsearch
    ports:
      - '9004:9004'
    logging:
      driver: fluentd
      options:
        tag: authenticate
        fluentd-address: localhost:24224

  authentication_db:
    container_name: authentication_db
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=authroot
    volumes:
      - ./services/authentication/db:/docker-entrypoint-initdb.d
    ports:
      - '3306:3306'
    restart: on-failure

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./monitor/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - store
    ports:
      - '9090:9090'

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - ./monitor/grafana/config.ini:/etc/grafana/grafana.ini
      - ./monitor/grafana/datasource.yml:/etc/grafana/provisioning/datasources/default.yaml
      - ./monitor/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/default.yaml
      - ./monitor/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    ports:
      - '3000:3000'

  envoy:
    image: envoyproxy/envoy:v1.20.0
    container_name: envoy
    ports:
      - '9900:9900'
      - '10000:10000'
    volumes:
      - ./gateway/envoy-config.yaml:/etc/envoy/envoy.yaml
    environment:
      - DEBUG_LEVEL=debug
    depends_on:
      - store
      - menu
      - fluentbit
      - elasticsearch
      - authentication
    logging:
      driver: fluentd
      options:
        tag: envoy
        fluentd-address: localhost:24224

  fluentbit:
    image: fluent/fluent-bit:1.8
    container_name: fluentbit
    volumes:
      - ./monitor/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    # restart: always
    ports:
      - '24224:24224'
      - '24224:24224/udp'
    depends_on:
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch
    # restart: always
    environment:
      - 'xpack.security.enabled=false'
      - 'discovery.type=single-node'
    ports:
      - '9200:9200'
      - '9300:9300'

  kibana:
    image: docker.elastic.co/kibana/kibana:7.4.2
    container_name: kibana
    # restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

networks:
  openfood:
